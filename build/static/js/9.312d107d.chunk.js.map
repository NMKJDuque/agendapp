{"version":3,"sources":["constants/ViewPort.js","pages/Schedule/index.js","hooks/useScreenViewPort.js","components/Topbar/styles.js","components/Topbar/index.js"],"names":["SCREEN_VIEWPORT","localizer","momentLocalizer","moment","events","title","start","Date","end","CALENDAR_VIEW_MODE","Schedule","useState","calendarDefaultView","setCalendarDefaultView","loading","setLoading","screenViewPort","setScreenViewPort","useEffect","handlerResize","isDesktop","window","innerWidth","addEventListener","removeEventListener","useScreenViewPort","a","bosstrap","Topbar","isBackVisible","Input","type","icon","FaSearch","placeholder","startAccessor","endAccessor","style","height","defaultView","views","TopbarContainer","styled","div","TopbarTitle","BackButtonTopbar","Theme1","primary","onPress","onClick"],"mappings":"mMAAaA,EACA,UADAA,EAEF,S,uBCOLC,EAAYC,YAAgBC,KAE5BC,EAAS,CACX,CACIC,MAAO,UACPC,MAAO,IAAIC,KACXC,IAAK,IAAID,OAKXE,EACG,MADHA,EAEI,OA+CKC,UA3CG,SAAC,GAAa,IAAZL,EAAW,EAAXA,MAAW,EAC2BM,mBAASF,GADpC,mBACpBG,EADoB,KACCC,EADD,OAEGF,oBAAS,GAFZ,mBAEpBG,EAFoB,KAEXC,EAFW,KAGpBC,EC3BsB,WAAM,IAAD,EACSL,mBAAS,MADlB,mBAC3BK,EAD2B,KACZC,EADY,KAalC,OAXAC,qBAAU,WACN,IAAMC,EAAgB,WAClB,IAAMC,EAAYC,OAAOC,WAAa,IACtCL,EAAkBG,EAAYpB,EAA0BA,IAM7D,OAJCmB,IAGDE,OAAOE,iBAAiB,SAAUJ,GAC3B,kBAAME,OAAOG,oBAAoB,SAAUL,MACnD,IACK,CACHH,kBDaqBS,GAAlBT,eAeP,OAZAE,qBAAU,YACQ,uCAAG,sBAAAQ,EAAA,sEACPX,GAAW,GADJ,WAEVC,EAFU,gCAGHH,EAAuBG,IAAmBhB,EAA0BS,EAA0BA,GAH3F,uBAKHM,GAAW,GALR,2CAAH,qDAQdY,KACD,CAACX,IAGA,eAAC,WAAD,WACI,cAACY,EAAA,EAAD,CAAQC,eAAe,EAAOxB,MAAOA,IACrC,qCACA,cAACyB,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAMC,IAAUC,YAAY,eAE/C,2BAGKpB,GACG,cAAC,IAAD,CACIb,UAAWA,EACXG,OAAQA,EACR+B,cAAc,QACdC,YAAY,MACZC,MAAO,CAACC,OAAQ,QAChBC,YAAa3B,EACb4B,MAAO,CAAC,QAAQ,OAAO,c,kGE3DlCC,EAAkBC,IAAOC,IAAV,mIAOfC,EAAcF,IAAOC,IAAV,8GAQXE,EAAmBH,IAAOC,IAAV,+KAMRG,IAAOC,S,eCpBfnB,EAAS,SAAC,GAA4C,IAAD,IAAzCC,qBAAyC,SAAnBxB,EAAmB,EAAnBA,MAAO2C,EAAY,EAAZA,QAClD,OACI,eAACP,EAAD,WACKZ,GAAiB,cAACgB,EAAD,CAAkBI,QAASD,EAA3B,SAAoC,cAAC,IAAD,MACtD,cAACJ,EAAD,UACI,6BAAKvC","file":"static/js/9.312d107d.chunk.js","sourcesContent":["export const SCREEN_VIEWPORT = {\n    DESKTOP: 'desktop',\n    MOBILE:'mobile'\n}\n","import { Fragment, useEffect, useState } from \"react\";\nimport { Topbar } from \"../../components/Topbar\";\nimport {Calendar, momentLocalizer} from \"react-big-calendar\";\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport moment from \"moment\"\nimport { SCREEN_VIEWPORT } from \"../../constants/ViewPort\";\nimport { useScreenViewPort } from \"../../hooks/useScreenViewPort\";\nimport { Input } from \"../../components/Input\";\nimport {  FaSearch} from \"react-icons/fa\";\nconst localizer = momentLocalizer(moment);\n\nconst events = [\n    {\n        title: \"Tarea 1\",\n        start: new Date(),\n        end: new Date(),\n\n    },\n]\n\nconst CALENDAR_VIEW_MODE = {\n    DAY: 'day',\n    WEEK: 'week'\n}\n\n\n const Schedule = ({title}) => {\n    const [calendarDefaultView, setCalendarDefaultView] = useState(CALENDAR_VIEW_MODE.WEEK);\n    const [loading, setLoading] = useState(true);\n    const {screenViewPort} = useScreenViewPort();\n    \n\n    useEffect(()=>{\n        const bosstrap = async () =>{\n            await setLoading(true);\n            if(screenViewPort){\n                await setCalendarDefaultView(screenViewPort === SCREEN_VIEWPORT.DESKTOP ? CALENDAR_VIEW_MODE.WEEK : CALENDAR_VIEW_MODE.DAY);\n                //setTimeout(()=>{ setLoading(false) },0);\n                await setLoading(false);\n            }\n        }\n        bosstrap();\n     },[screenViewPort]);\n\n    return (\n        <Fragment>\n            <Topbar isBackVisible={false} title={title}></Topbar>\n            <>\n            <Input type=\"text\" icon={FaSearch} placeholder=\"search....\"/>\n\n            <br/>\n            </>\n            {\n                !loading &&(\n                    <Calendar \n                        localizer={localizer}\n                        events={events}\n                        startAccessor=\"start\"\n                        endAccessor=\"end\"\n                        style={{height: \"70vh\"}}\n                        defaultView={calendarDefaultView}\n                        views={['month','week','day']}\n                    />\n                )\n        }\n        </Fragment>\n        \n    )\n}\nexport default Schedule;\n","import { useEffect, useState } from \"react\";\nimport { SCREEN_VIEWPORT } from \"./../constants/ViewPort\";\nexport const useScreenViewPort = () =>{\n    const [screenViewPort,setScreenViewPort] = useState(null);\n    useEffect(()=>{\n        const handlerResize = () =>{\n            const isDesktop = window.innerWidth > 768;\n            setScreenViewPort(isDesktop ? SCREEN_VIEWPORT.DESKTOP : SCREEN_VIEWPORT.MOBILE);\n        } \n        handlerResize(); \n       \n       \n       window.addEventListener('resize', handlerResize);\n       return () => window.removeEventListener('resize', handlerResize);\n    },[]);\n    return {\n        screenViewPort\n    }\n}\n","import styled from \"styled-components\";\nimport { Theme1 } from \"./../../themes/theme1\";\nexport const TopbarContainer = styled.div`\n    //border: 1px solid black;\n    display: flex;\n    align-items: center;\n    padding: 10px 20px;\n`;\n\nexport const TopbarTitle = styled.div`\n    flex: 1;\n    text-align: center;\n    h4{\n        font-size: 1.3em;\n    }\n`;\n\nexport const BackButtonTopbar = styled.div`\n    svg{\n        font-size: 1.5em;\n        color: #888;\n        cursor: pointer;\n        &:hover{\n            color: ${Theme1.primary};\n        }\n    }\n\n`;\n","import { BackButtonTopbar, TopbarContainer, TopbarTitle } from \"./styles\"\nimport { FaAngleLeft } from \"react-icons/fa\";\n\nexport const Topbar = ({ isBackVisible = true, title, onPress}) =>{\n    return(\n        <TopbarContainer>\n            {isBackVisible && <BackButtonTopbar onClick={onPress}><FaAngleLeft /></BackButtonTopbar>}           \n            <TopbarTitle>\n                <h4>{title}</h4>\n            </TopbarTitle>\n        </TopbarContainer>\n    );\n};\n"],"sourceRoot":""}